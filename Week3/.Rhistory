install.packages('devtools')
version
install.packages('Echarts4r')
install.packages('echarts4r')
q()
install.packages('library(lubridate)
install.packages('library(lubridate)
install.packages('lubridate')
quit()
library(dplyr)
library(ggplot2)
# Import datasets
Training_Data <- read.csv('https://insidesherpa.s3.amazonaws.com/vinternships/companyassets/SKZxezskWgmFjRvj9/ml_case_training_data.csv')
Pricing_Data <- read.csv('https://insidesherpa.s3.amazonaws.com/vinternships/companyassets/SKZxezskWgmFjRvj9/ml_case_training_hist_data.csv')
Training_output_Data <- read.csv('https://insidesherpa.s3.amazonaws.com/vinternships/companyassets/SKZxezskWgmFjRvj9/ml_case_training_output.csv')
# A Look into the datasets
head(Training_Data)
head(Pricing_Data)
library(dplyr)
library(dplyr)
library(ggplot2)
# Import datasets
Training_Data <- read.csv('https://cdn.theforage.com/vinternships/companyassets/SKZxezskWgmFjRvj9/ml_case_training_data.csv')
Pricing_Data <- read.csv('https://cdn.theforage.com/vinternships/companyassets/SKZxezskWgmFjRvj9/ml_case_training_hist_data.csv')
Training_output_Data <- read.csv('https://cdn.theforage.com/vinternships/companyassets/SKZxezskWgmFjRvj9/ml_case_training_output.csv')
# A Look into the datasets
head(Training_Data)
head(Training_output_Data)
colnames(Training_Data)
summary(Training_Data)
summary(Training_output_Data)
Data <- merge(Training_Data, Training_output_Data, by = 'id')
summary(Data)
countNA <- Data %>% summarize_all(funs(sum(is.na(.)) / length(.)*100))
countNA <-t(countNA)
countNA
Data <- Data[,which(colMeans(!is.na(Data))>0.30)]
Data <- Data[complete.cases(Data),]
sum(is.na(Data))
summary(Data)
#  A Look into Pricing Data
head(Pricing_Data)
Pricing_Data <- Pricing_Data[complete.cases(Pricing_Data),]
glimpse(Pricing_Data)
head(Data$activity_new)
summary(Data$date_first_activ)
colnames(Data)
ggplot(Data, aes(x=churn))+
geom_count()
ggplot(Data, aes(x=churn, y = count))+
geom_count()
ggplot(Data, aes(x=churn, y = count))+
geom_bar()
ggplot(Data, aes(x=churn)+
)
geom_bar()
ggplot(Data, aes(x=churn))+
geom_bar()
dataset(iris)
data = data(iris)
head(data)
data = dataset(iris)
library(dataset)
iris
data = iris
head(iris)
corr.test(iris['Sepal.Length'], iris[
'Sepal.Width'], method = 'spearman')
[A
quit()
plot(iris$Sepal.Length, iris$Sepal.Width)
barplot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
URL <- "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- jsonlite::fromJSON(URL)
head( Energy$links )
head( Energy$nodes )
p
p <- sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
library(networkD3)
library(networkD3)
library(networkD3)
nstall.packages('networkD3')
install.packages('networkD3')
library(networkD3)
URL <- "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- jsonlite::fromJSON(URL)
head( Energy$links )
head( Energy$nodes )
p <- sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p
install.packages(c("brio", "bslib", "colorspace", "corrplot", "curl", "devtools", "dplyr", "gh", "gt", "httpuv", "insight", "ipmisc", "IRkernel", "jquerylib", "knitr", "later", "openssl", "rmarkdown", "sass", "stringi", "viridis"))
version
RStudio.Version()
RStudio.Version()
RStudio.Version()
source('~/Personal not your shit/H./Online Classes/R programming/Econometrics/Week3/TestExer3_1.R', echo=TRUE)
View(fittedLine)
View(fittedLine)
